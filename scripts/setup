#!/usr/bin/env bash

# scripts/setup: set up the application environment for the first time

set -e
set -o pipefail

cd "$(dirname "$0")/.."

if [[ -f env/bin/activate ]] ; then
    echo "Virtualenv already exists with $(env/bin/python --version 2>&1)"
else
    echo "Creating the virtualenv (using $(python3 --version 2>&1))"
    python3 -m venv env
fi
echo "export DJANGO_SETTINGS_MODULE=ww.settings" >> env/bin/activate
source env/bin/activate

echo "Installing $(cat requirements.txt.lock | wc -l) python packages"
pip install -r requirements.txt.lock

echo "Customizing configuration"
source secrets
# Note the single '>' redirect to ensure local configurations start clean
echo "SECRET_KEY = '$(python -c "import base64, os; print base64.b64encode(os.urandom(40))")'" > ww/local.py
echo "DEFAULT_FROM_EMAIL = 'watchword@$MAIN_DOMAIN'" >> ww/local.py
echo "SERVER_EMAIL = 'django@$MAIN_DOMAIN'" >> ww/local.py
echo "EMAIL_BACKEND = 'anymail.backends.mailgun.EmailBackend'" >> ww/local.py
cat << EOF >> ww/local.py
ANYMAIL = {
    "MAILGUN_API_KEY": "$MAILGUN_API_KEY",
    "MAILGUN_SENDER_DOMAIN": "$MAILGUN_SERVER_NAME",
}
EOF
echo "ALLOWED_HOSTS = ['$MAIN_DOMAIN', '$PING_DOMAIN']" >> ww/local.py
echo "DEBUG = False" >> ww/local.py

echo "Running database migrations"
python manage.py migrate

echo "Creating the superuser"
python manage.py createsuperuser

echo "Using crontab to send flares for alarms"
cat etc/crontab.watchword \
    | sed -e "s@{{ APPLICATION_ROOT }}@$(pwd)@" \
    | sed -e "s@{{ EXTERNAL_WATCH }}@$EXTERNAL_WATCH@" \
    | crontab -u $(whoami) -
